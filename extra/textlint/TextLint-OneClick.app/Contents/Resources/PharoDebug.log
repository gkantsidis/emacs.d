THERE_BE_DRAGONS_HERE
GoferRepositoryError: Could not access http://source.lukas-renggli.ch/Glamour
2 January 2014 11:00:53 pm

VM: unix - i686 - linux-gnu - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.163]
Image: Pharo1.3 [Latest update: #13328]

[:error | ^ GoferRepositoryError signal: error messageText repository: self] in MCHttpRepository(MCFileBasedRepository)>>goferReferences
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 
		error: 	Error: Could not access http://source.lukas-renggli.ch/Glamour
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


BlockClosure>>cull:
	Receiver: [:error | ^ GoferRepositoryError signal: error messageText repository: self]
	Arguments and temporary variables: 
		anArg: 	Error: Could not access http://source.lukas-renggli.ch/Glamour
	Receiver's instance variables: 
		outerContext: 	MCHttpRepository(MCFileBasedRepository)>>goferReferences
		startpc: 	61
		numArgs: 	1


[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Could not access http://source.lukas-renggli.ch/Glamour
	Receiver's instance variables: 
		sender: 	MCHttpRepository(MCFileBasedRepository)>>goferReferences
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(137625600)")
		closureOrNil: 	nil
		receiver: 	[self allVersionNames]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		cull: exception]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	98
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	Error: Could not access http://source.lukas-renggli.ch/Glamour
		val: 	nil
	Receiver's instance variables: 
		sender: 	MCHttpRepository(MCFileBasedRepository)>>goferReferences
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(137625600)")
		closureOrNil: 	nil
		receiver: 	[self allVersionNames]


Error(Exception)>>signal
	Receiver: Error: Could not access http://source.lukas-renggli.ch/Glamour
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Could not access http://source.lukas-renggli.ch/Glamour'
		tag: 	nil
		signaler: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


Error(Exception)>>signal:
	Receiver: Error: Could not access http://source.lukas-renggli.ch/Glamour
	Arguments and temporary variables: 
		signalerText: 	'Could not access http://source.lukas-renggli.ch/Glamour'
	Receiver's instance variables: 
		messageText: 	'Could not access http://source.lukas-renggli.ch/Glamour'
		tag: 	nil
		signaler: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
		signalContext: 	Error(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil


MCHttpRepository(Object)>>error:
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 
		aString: 	'Could not access http://source.lukas-renggli.ch/Glamour'
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


MCHttpRepository>>allFileNames
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 
		index: 	#('HTTP request for http://source.lukas-renggli.ch:80/Glamour/?C=M%3BO%3...etc...
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


MCHttpRepository(MCFileBasedRepository)>>allFileNamesOrCache
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


MCHttpRepository(MCFileBasedRepository)>>readableFileNames
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 
		all: 	nil
		cached: 	nil
		new: 	nil
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


MCHttpRepository(MCFileBasedRepository)>>allVersionNames
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


[self allVersionNames] in MCHttpRepository(MCFileBasedRepository)>>goferReferences
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


BlockClosure>>on:do:
	Receiver: [self allVersionNames]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:error | ^ GoferRepositoryError signal: error messageText repos...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	MCHttpRepository(MCFileBasedRepository)>>goferReferences
		startpc: 	53
		numArgs: 	0


MCHttpRepository(MCFileBasedRepository)>>goferReferences
	Receiver: a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Arguments and temporary variables: 
		versionNames: 	nil
	Receiver's instance variables: 
		creationTemplate: 	nil
		storeDiffs: 	nil
		cache: 	nil
		allFileNames: 	nil
		location: 	'http://source.lukas-renggli.ch/Glamour'
		user: 	''
		password: 	''
		readerCache: 	nil


[aRepository goferReferences asSortedCollection asArray] in Gofer>>basicReferencesIn:
	Receiver: a Gofer
	Arguments and temporary variables: 
		aRepository: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


BlockClosure>>on:do:
	Receiver: [aRepository goferReferences asSortedCollection asArray]
	Arguments and temporary variables: 
		exception: 	GoferRepositoryError
		handlerAction: 	[:error | error pass]
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	Gofer>>basicReferencesIn:
		startpc: 	38
		numArgs: 	0


Gofer>>basicReferencesIn:
	Receiver: a Gofer
	Arguments and temporary variables: 
		aRepository: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


[self basicReferencesIn: aRepository] in Gofer>>allResolvedIn:
	Receiver: a Gofer
	Arguments and temporary variables: 
		aRepository: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


[self at: key put: aBlock value] in Dictionary>>at:ifAbsentPut:
	Receiver: a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspace/textlint/package...etc...
	Arguments and temporary variables: 
		key: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
		aBlock: 	[self basicReferencesIn: aRepository]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspac...etc...


Dictionary>>at:ifAbsent:
	Receiver: a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspace/textlint/package...etc...
	Arguments and temporary variables: 
		key: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
		aBlock: 	[self at: key put: aBlock value]
		assoc: 	nil
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspac...etc...


Dictionary>>at:ifAbsentPut:
	Receiver: a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspace/textlint/package...etc...
	Arguments and temporary variables: 
		key: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
		aBlock: 	[self basicReferencesIn: aRepository]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspac...etc...


Gofer>>allResolvedIn:
	Receiver: a Gofer
	Arguments and temporary variables: 
		aRepository: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


[:repository | resolved
		addAll: (self allResolvedIn: repository)] in Gofer>>allResolved
	Receiver: a Gofer
	Arguments and temporary variables: 
		resolved: 	a MCHttpRepository(http://source.lukas-renggli.ch/Glamour)
		repository: 	an OrderedCollection(a GoferResolvedReference name: 'Glamour-Announ...etc...
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspace/textlint/package-cac...etc...
	Arguments and temporary variables: 
		aBlock: 	[:repository | resolved
		addAll: (self allResolvedIn: repository)]
		index: 	2
		indexLimiT: 	2
	Receiver's instance variables: 
an Array(a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/workspace/textlint/package-cac...etc...

Gofer>>allResolved
	Receiver: a Gofer
	Arguments and temporary variables: 
		resolved: 	an OrderedCollection(a GoferResolvedReference name: 'Glamour-Announce...etc...
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


GoferVersionReference(GoferReference)>>resolveAllWith:
	Receiver: a GoferVersionReference name: 'Glamour-Announcements-TudorGirba.6'
	Arguments and temporary variables: 
		aGofer: 	a Gofer
	Receiver's instance variables: 
		name: 	'Glamour-Announcements-TudorGirba.6'
		package: 	'Glamour-Announcements'
		author: 	'TudorGirba'
		branch: 	''
		versionNumber: 	6


GoferVersionReference(GoferReference)>>resolveWith:
	Receiver: a GoferVersionReference name: 'Glamour-Announcements-TudorGirba.6'
	Arguments and temporary variables: 
		aGofer: 	a Gofer
		references: 	nil
	Receiver's instance variables: 
		name: 	'Glamour-Announcements-TudorGirba.6'
		package: 	'Glamour-Announcements'
		author: 	'TudorGirba'
		branch: 	''
		versionNumber: 	6


[:each | each resolveWith: self] in Gofer>>resolved
	Receiver: a Gofer
	Arguments and temporary variables: 
		each: 	a GoferVersionReference name: 'Glamour-Announcements-TudorGirba.6'
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


Array(SequenceableCollection)>>collect:
	Receiver: an Array(a GoferVersionReference name: 'Glamour-Announcements-TudorGirba.6' a GoferVersion...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each resolveWith: self]
		newCollection: 	#(nil nil nil nil nil nil nil nil nil)
		index: 	1
		indexLimiT: 	9
	Receiver's instance variables: 
an Array(a GoferVersionReference name: 'Glamour-Announcements-TudorGirba.6' a GoferVersion...etc...

Gofer>>resolved
	Receiver: a Gofer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	a Dictionary(a MCCacheRepository(/srv/jenkins/app/jobs...etc...


GoferLoad>>initializeOn:
	Receiver: a GoferLoad
	Arguments and temporary variables: 
		aGofer: 	a Gofer
	Receiver's instance variables: 
		gofer: 	a Gofer
		model: 	a MCVersionLoader


GoferLoad class(GoferOperation class)>>on:
	Receiver: GoferLoad
	Arguments and temporary variables: 
		aGofer: 	a Gofer
	Receiver's instance variables: 
		superclass: 	GoferOperation
		methodDict: 	a MethodDictionary(#addResolved:->(GoferLoad>>#addResolved: "a Comp...etc...
		format: 	134
		instanceVariables: 	nil
		organization: 	('accessing' versions)
('initialization' initializeOn:)
('running...etc...
		subclasses: 	nil
		name: 	#GoferLoad
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Gofer-Core'
		traitComposition: 	{}
		localSelectors: 	nil


Gofer>>execute:do:
	Receiver: a Gofer
	Arguments and temporary variables: 
		anOperationClass: 	GoferLoad
		aBlock: 	nil
		operation: 	nil
		result: 	nil
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	nil


Gofer>>execute:
	Receiver: a Gofer
	Arguments and temporary variables: 
		anOperationClass: 	GoferLoad
	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	nil


Gofer>>load
	Receiver: a Gofer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		references: 	an OrderedCollection(a GoferVersionReference name: 'Glamour-Announc...etc...
		repositories: 	an OrderedCollection(a MCHttpRepository(http://source.lukas-rengg...etc...
		errorBlock: 	[:error | error pass]
		packageCacheRepository: 	a MCCacheRepository(/srv/jenkins/app/jobs/TextLint/work...etc...
		resolvedReferencesCache: 	nil


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'"TextLint Prerequisites"
Gofer new
        renggli: ''Glamour'';...etc...
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	nil
		failBlock: 	[^ nil]
		logFlag: 	true
		methodNode: 	DoIt
	"TextLint Prerequisites"
	Gofer new renggli: 'Glamour';
		 ve...etc...
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(966524928)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '"TextLint Prerequisites"
Gofer new
        renggli:...etc...
		requestor: 	nil
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


Compiler class>>evaluate:for:notifying:logged:
	Receiver: Compiler
	Arguments and temporary variables: 
		textOrString: 	'"TextLint Prerequisites"
Gofer new
        renggli: ''Glamour'';...etc...
		anObject: 	nil
		aController: 	nil
		logFlag: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#compile:in:classified:notifying:ifFail:->(Compi...etc...
		format: 	142
		instanceVariables: 	#('sourceStream' 'requestor' 'class' 'category' 'context' 'p...etc...
		organization: 	('error handling' interactive notify: notify:at:)
('public access...etc...
		subclasses: 	nil
		name: 	#Compiler
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Compiler-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil



--- The full stack ---
[:error | ^ GoferRepositoryError signal: error messageText repository: self] in MCHttpRepository(MCFileBasedRepository)>>goferReferences
BlockClosure>>cull:
[(self tempAt: 2)
		cull: exception] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
Error(Exception)>>signal
Error(Exception)>>signal:
MCHttpRepository(Object)>>error:
MCHttpRepository>>allFileNames
MCHttpRepository(MCFileBasedRepository)>>allFileNamesOrCache
MCHttpRepository(MCFileBasedRepository)>>readableFileNames
MCHttpRepository(MCFileBasedRepository)>>allVersionNames
[self allVersionNames] in MCHttpRepository(MCFileBasedRepository)>>goferReferences
BlockClosure>>on:do:
MCHttpRepository(MCFileBasedRepository)>>goferReferences
[aRepository goferReferences asSortedCollection asArray] in Gofer>>basicReferencesIn:
BlockClosure>>on:do:
Gofer>>basicReferencesIn:
[self basicReferencesIn: aRepository] in Gofer>>allResolvedIn:
[self at: key put: aBlock value] in Dictionary>>at:ifAbsentPut:
Dictionary>>at:ifAbsent:
Dictionary>>at:ifAbsentPut:
Gofer>>allResolvedIn:
[:repository | resolved
		addAll: (self allResolvedIn: repository)] in Gofer>>allResolved
Array(SequenceableCollection)>>do:
Gofer>>allResolved
GoferVersionReference(GoferReference)>>resolveAllWith:
GoferVersionReference(GoferReference)>>resolveWith:
[:each | each resolveWith: self] in Gofer>>resolved
Array(SequenceableCollection)>>collect:
Gofer>>resolved
GoferLoad>>initializeOn:
GoferLoad class(GoferOperation class)>>on:
Gofer>>execute:do:
Gofer>>execute:
Gofer>>load
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
Compiler class>>evaluate:for:notifying:logged:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Compiler class>>evaluate:for:logged:
Compiler class>>evaluate:logged:
[| chunk | val := (self peekFor: $!)
				ifTrue: [(Compiler evaluate: self nextChunk logged: false)
						scanFrom: self]
				ifFalse: [chunk := self nextChunk.
					self checkForPreamble: chunk.
					Compiler evaluate: chunk logged: true]] in [:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(Compiler evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							Compiler evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in RWBinaryOrTextStream(PositionableStream)>>fileInAnnouncing:
BlockClosure>>on:do:
[:bar | 
[self atEnd]
		whileFalse: [bar value: self position.
			self skipSeparators.
			[| chunk | val := (self peekFor: $!)
						ifTrue: [(Compiler evaluate: self nextChunk logged: false)
								scanFrom: self]
						ifFalse: [chunk := self nextChunk.
							self checkForPreamble: chunk.
							Compiler evaluate: chunk logged: true]]
				on: InMidstOfFileinNotification
				do: [:ex | ex resume: true].
			self skipStyleChunk].
	self close] in RWBinaryOrTextStream(PositionableStream)>>fileInAnnouncing:
NonInteractiveUIManager>>progressInitiationExceptionDefaultAction:
ProgressInitiationException>>defaultAction
UndefinedObject>>handleSignal:
ProgressInitiationException(Exception)>>signal
ProgressInitiationException>>display:at:from:to:during:
ProgressInitiationException class>>display:at:from:to:during:
ByteString(String)>>displayProgressAt:from:to:during:
RWBinaryOrTextStream(PositionableStream)>>fileInAnnouncing:
RWBinaryOrTextStream(PositionableStream)>>fileIn
CodeLoader>>installSourceFile:
[:req | 
req startRetrieval.
	self installSourceFile: req contentStream] in CodeLoader>>installSourceFiles
Array(SequenceableCollection)>>do:
CodeLoader>>installSourceFiles
CodeLoader class>>commandLineHandlerAction:
[:cl | CodeLoader commandLineHandlerAction: cl] in CodeLoader class>>initialize
[:each | 
| actionBlock conditionBlock |
conditionBlock := each key.
	actionBlock := each value.
	(conditionBlock value: anUserInput)
		ifTrue: [actionBlock value: anUserInput]] in CommandLine class(AbstractUserInput class)>>dispatch:
[:association | aBlock value: association value] in Dictionary>>valuesDo:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>valuesDo:
Dictionary>>do:
CommandLine class(AbstractUserInput class)>>dispatch:
[self dispatch: singleton] in CommandLine class>>dispatch
BlockClosure>>cull:
[:each | each cull: resuming] in SmalltalkImage>>executeDeferredStartupActions:
OrderedCollection>>do:
SmalltalkImage>>executeDeferredStartupActions:
SmalltalkImage>>snapshot:andQuit:
[SmalltalkImage current snapshot: true andQuit: true] in UndefinedObject>>DoIt
WorldState>>runStepMethodsIn:
PasteUpMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

Processes and their stacks: 
Process: a Process in nil
  stack:

Array(SequenceableCollection)>>do:
[:logger | 
logger nextPutAll: 'Processes and their stacks: ';
		 cr.
	Process allInstances
		do: [:each | 
			| ctx |
			logger nextPutAll: 'Process: ';
				 print: each;
				 cr;
				 nextPutAll: '  stack:';
				 cr;
				 cr.
			ctx := each isActiveProcess
						ifTrue: [thisContext sender]
						ifFalse: [each suspendedContext].
			ctx
				ifNotNil: [(ctx stackOfSize: 20)
						do: [:s | logger print: s;
								 cr]].
			logger nextPutAll: '------------------------------';
				 cr;
				 cr]] in [Smalltalk logError: aString inContext: aContext.
	Smalltalk
		logDuring: [:logger | 
			logger nextPutAll: 'Processes and their stacks: ';
				 cr.
			Process allInstances
				do: [:each | 
					| ctx |
					logger nextPutAll: 'Process: ';
						 print: each;
						 cr;
						 nextPutAll: '  stack:';
						 cr;
						 cr.
					ctx := each isActiveProcess
								ifTrue: [thisContext sender]
								ifFalse: [each suspendedContext].
					ctx
						ifNotNil: [(ctx stackOfSize: 20)
								do: [:s | logger print: s;
										 cr]].
					logger nextPutAll: '------------------------------';
						 cr;
						 cr]]] in NonInteractiveUIManager>>quitFrom:withMessage:
[logStream := self openLog.
	aMonadicBlock value: logStream] in SmalltalkImage>>logDuring:
BlockClosure>>ensure:
SmalltalkImage>>logDuring:
[Smalltalk logError: aString inContext: aContext.
	Smalltalk
		logDuring: [:logger | 
			logger nextPutAll: 'Processes and their stacks: ';
				 cr.
			Process allInstances
				do: [:each | 
					| ctx |
					logger nextPutAll: 'Process: ';
						 print: each;
						 cr;
						 nextPutAll: '  stack:';
						 cr;
						 cr.
					ctx := each isActiveProcess
								ifTrue: [thisContext sender]
								ifFalse: [each suspendedContext].
					ctx
						ifNotNil: [(ctx stackOfSize: 20)
								do: [:s | logger print: s;
										 cr]].
					logger nextPutAll: '------------------------------';
						 cr;
						 cr]]] in NonInteractiveUIManager>>quitFrom:withMessage:
BlockClosure>>ensure:
NonInteractiveUIManager>>quitFrom:withMessage:
NonInteractiveUIManager>>unhandledErrorDefaultAction:
UnhandledError>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
UnhandledError(Exception)>>signal
UnhandledError class>>signalForException:
GoferRepositoryError(Error)>>defaultAction
UndefinedObject>>handleSignal:
MethodContext(ContextPart)>>handleSignal:
GoferRepositoryError(Exception)>>pass
------------------------------

Process: a Process in Delay class>>handleTimerEvent
  stack:

Delay class>>handleTimerEvent
Delay class>>runTimerEventLoop
[self runTimerEventLoop] in Delay class>>startTimerEventLoop
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in [self value.
	Processor terminateActive] in BlockClosure>>newProcess
  stack:

[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in [self value.
	Processor terminateActive] in BlockClosure>>newProcess
  stack:

[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in [self value.
	Processor terminateActive] in BlockClosure>>newProcess
  stack:

[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in [self value.
	Processor terminateActive] in BlockClosure>>newProcess
  stack:

[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in [delaySemaphore wait] in Delay>>wait
  stack:

[delaySemaphore wait] in Delay>>wait
BlockClosure>>ifCurtailed:
Delay>>wait
InputEventPollingFetcher>>waitForInput
InputEventPollingFetcher(InputEventFetcher)>>eventLoop
[self eventLoop] in InputEventPollingFetcher(InputEventFetcher)>>installEventLoop
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in SmalltalkImage>>lowSpaceWatcher
  stack:

SmalltalkImage>>lowSpaceWatcher
[self lowSpaceWatcher] in SmalltalkImage>>installLowSpaceWatcher
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in ProcessorScheduler class>>idleProcess
  stack:

ProcessorScheduler class>>idleProcess
[self idleProcess] in ProcessorScheduler class>>startUp
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in WeakArray class>>finalizationProcess
  stack:

WeakArray class>>finalizationProcess
[self finalizationProcess] in WeakArray class>>restartFinalizationProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------

Process: a Process in Process>>terminate
  stack:

Process>>terminate
------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>sliceFrom:to:
7 October 2015 9:30:08 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\algorithms.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 55
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	nil
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\algorithms.tex'

[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\algorithms.tex'
		fileStream: 	nil
		cursor: 	1
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLNegativeFormRule
	a TLPhrase (not) a TLR...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(653 to: 658)
		styleAnnouncer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (file...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStrea...etc...
		startpc: 	172
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream force...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		presentation: 	a GLMActionListPresentation(id=489947136 title=nil pane=a GLMPane...etc...
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\algorithms.tex'
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLNegativeFormRule
	a TLPhrase (not) a TLR...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(653 to: 658)
		styleAnnouncer: 	an Announcer


BlockClosure>>glamourValueWithArgs:
	Receiver: [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMActionListPresentation(id=489947136 title=nil pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	[:a | a actionList
		act: [:presentation :filePath | 
			Cursor w...etc...
		startpc: 	165
		numArgs: 	2


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMActionListPresentation(id=489947136 title=nil pane=a GLMPan...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		logger: 	a GLMNullLogger
		action: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream curs...etc...
		title: 	'Export'
		shortcut: 	nil
		position: 	nil
		category: 	nil
		icon: 	nil


GLMButtonModel>>execute
	Receiver: a GLMButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		glamourPresentation: 	a GLMActionListPresentation(id=489947136 title=nil pane=a ...etc...
		glamourAction: 	a GLMGenericAction


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(351272960)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	645@739 corner: 2553@763
		owner: 	a PanelMorph(276037632)
		submorphs: 	an Array(an AlignmentMorph(19922944))
		fullBounds: 	645@739 corner: 2553@763
		color: 	Color transparent
		extension: 	a MorphExtension (377749504) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(351272960)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(351272960)
		m: 	[1594@752 mouseUp 117511812 nil]
	Receiver's instance variables: 
		bounds: 	645@739 corner: 2553@763
		owner: 	a PanelMorph(276037632)
		submorphs: 	an Array(an AlignmentMorph(19922944))
		fullBounds: 	645@739 corner: 2553@763
		color: 	Color transparent
		extension: 	a MorphExtension (377749504) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(351272960))
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(351272960))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(351272960)
	Arguments and temporary variables: 
		evt: 	[1594@752 mouseUp 117511812 nil]
		all: 	an Array(a PluggableButtonMorph(351272960))
	Receiver's instance variables: 
		bounds: 	645@739 corner: 2553@763
		owner: 	a PanelMorph(276037632)
		submorphs: 	an Array(an AlignmentMorph(19922944))
		fullBounds: 	645@739 corner: 2553@763
		color: 	Color transparent
		extension: 	a MorphExtension (377749504) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(351272960)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
	Receiver's instance variables: 
		bounds: 	645@739 corner: 2553@763
		owner: 	a PanelMorph(276037632)
		submorphs: 	an Array(an AlignmentMorph(19922944))
		fullBounds: 	645@739 corner: 2553@763
		color: 	Color transparent
		extension: 	a MorphExtension (377749504) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [1594@752 mouseUp 117511812 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(351272960)
	Receiver's instance variables: 
		timeStamp: 	117511812
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	1594@752
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(351272960)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
	Receiver's instance variables: 
		bounds: 	645@739 corner: 2553@763
		owner: 	a PanelMorph(276037632)
		submorphs: 	an Array(an AlignmentMorph(19922944))
		fullBounds: 	645@739 corner: 2553@763
		color: 	Color transparent
		extension: 	a MorphExtension (377749504) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(351272960)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
	Receiver's instance variables: 
		bounds: 	645@739 corner: 2553@763
		owner: 	a PanelMorph(276037632)
		submorphs: 	an Array(an AlignmentMorph(19922944))
		fullBounds: 	645@739 corner: 2553@763
		color: 	Color transparent
		extension: 	a MorphExtension (377749504) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
		focusHolder: 	a PluggableButtonMorph(351272960)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1594@752 corner: 1610@768
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1594@752 corner: 1610@768
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(541327360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1594@752 mouseUp 117511812 nil]
		targetOffset: 	949@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 117511812 1594 752 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2560@1537
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(424411136) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[1594@752 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 2560@1537
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(424411136) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
		focusHolder: 	a PluggableButtonMorph(351272960)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1594@752 corner: 1610@768
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1594@752 corner: 1610@768
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(541327360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1594@752 mouseUp 117511812 nil]
		targetOffset: 	949@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 117511812 1594 752 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
		focusHolder: 	a PluggableButtonMorph(351272960)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1594@752 corner: 1610@768
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1594@752 corner: 1610@768
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(541327360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1594@752 mouseUp 117511812 nil]
		targetOffset: 	949@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 117511812 1594 752 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
	Receiver's instance variables: 
		bounds: 	1594@752 corner: 1610@768
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1594@752 corner: 1610@768
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(541327360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1594@752 mouseUp 117511812 nil]
		targetOffset: 	949@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 117511812 1594 752 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[1594@752 mouseUp 117511812 nil]
		evt: 	[1594@752 mouseUp 117511812 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1594@752 corner: 1610@768
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1594@752 corner: 1610@768
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(541327360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1594@752 mouseUp 117511812 nil]
		targetOffset: 	949@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 117511812 1594 752 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[1594@752 mouseUp 117511812 nil]
		evtBuf: 	#(1 117511812 1594 752 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	1594@752 corner: 1610@768
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1594@752 corner: 1610@768
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(541327360)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1594@752 mouseUp 117511812 nil]
		targetOffset: 	949@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 117511812 1594 752 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2560@1537
		canvas: 	a FormCanvas on: DisplayScreen(2560x1537x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(513540096))(a Mor...etc...
		lastStepTime: 	153870
		lastStepMessage: 	nil
		lastCycleTime: 	153911
		alarms: 	a Heap()
		lastAlarmTime: 	153870
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2560@1537
		canvas: 	a FormCanvas on: DisplayScreen(2560x1537x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(513540096))(a Mor...etc...
		lastStepTime: 	153870
		lastStepMessage: 	nil
		lastCycleTime: 	153911
		alarms: 	a Heap()
		lastAlarmTime: 	153870
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2560@1537
		canvas: 	a FormCanvas on: DisplayScreen(2560x1537x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(513540096))(a Mor...etc...
		lastStepTime: 	153870
		lastStepMessage: 	nil
		lastCycleTime: 	153911
		alarms: 	a Heap()
		lastAlarmTime: 	153870
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 2560@1537
		canvas: 	a FormCanvas on: DisplayScreen(2560x1537x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(513540096))(a Mor...etc...
		lastStepTime: 	153870
		lastStepMessage: 	nil
		lastCycleTime: 	153911
		alarms: 	a Heap()
		lastAlarmTime: 	153870
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 2560@1537
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(424411136) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary()
		format: 	132
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
GLMButtonModel>>execute
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:19 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTextPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aTextPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTextPresentation>>renderGlamorouslyOn:
	Receiver: a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSDI-2015-Submission\con...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	[:file | file name]
		titleIcon: 	nil
		transformation: 	[:file | 
| text |
textLintChecker isNil
		ifFalse: [text := te...etc...
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[true]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTextPresentation(id=934281216 title=nil pane=a GLMPane(97...etc...
		registeredAnnouncers: 	an OrderedCollection(an Announcer an Announcer)
		updateActions: 	an OrderedCollection(a GLMSingleUpdateAction a GLMSingleUpdateAc...etc...
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		format: 	#glamourString
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	nil
		variableBindingsBlock: 	nil
		textBlock: 	nil
		selectedTextBlock: 	nil
		highlightSmalltalk: 	false
		highlightSmalltalkContext: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSD...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		index: 	#(nil)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->(GLMMorphicTabbedRen...etc...
		format: 	134
		instanceVariables: 	#('tabs')
		organization: 	('rendering' actOnPresentationUpdated: render:)

		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(637...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(637009920 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=865075200 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(6...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(6370...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(359923712)


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(359923712)


GLMMorphicPaneRenderer>>renderContainerFor:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		aPane: 	a GLMPane(637009920 code)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(359923712)



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:23 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTextPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aTextPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTextPresentation>>renderGlamorouslyOn:
	Receiver: a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSDI-2015-Submission\con...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	[:file | file name]
		titleIcon: 	nil
		transformation: 	[:file | 
| text |
textLintChecker isNil
		ifFalse: [text := te...etc...
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[true]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTextPresentation(id=934281216 title=nil pane=a GLMPane(10...etc...
		registeredAnnouncers: 	an OrderedCollection(an Announcer an Announcer)
		updateActions: 	an OrderedCollection(a GLMSingleUpdateAction a GLMSingleUpdateAc...etc...
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		format: 	#glamourString
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	nil
		variableBindingsBlock: 	nil
		textBlock: 	nil
		selectedTextBlock: 	nil
		highlightSmalltalk: 	false
		highlightSmalltalkContext: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSD...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		index: 	#(nil)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->(GLMMorphicTabbedRen...etc...
		format: 	134
		instanceVariables: 	#('tabs')
		organization: 	('rendering' actOnPresentationUpdated: render:)

		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(637...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(637009920 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=865075200 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		arrangement: 	a GLMTabbedArrangement


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(6...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicPaneRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(6370...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		container: 	a PanelMorph(359923712)



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:24 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTextPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aTextPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTextPresentation>>renderGlamorouslyOn:
	Receiver: a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSDI-2015-Submission\con...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	[:file | file name]
		titleIcon: 	nil
		transformation: 	[:file | 
| text |
textLintChecker isNil
		ifFalse: [text := te...etc...
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[true]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTextPresentation(id=934281216 title=nil pane=a GLMPane(10...etc...
		registeredAnnouncers: 	an OrderedCollection(an Announcer an Announcer)
		updateActions: 	an OrderedCollection(a GLMSingleUpdateAction a GLMSingleUpdateAc...etc...
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		format: 	#glamourString
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	nil
		variableBindingsBlock: 	nil
		textBlock: 	nil
		selectedTextBlock: 	nil
		highlightSmalltalk: 	false
		highlightSmalltalkContext: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSD...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		index: 	#(nil)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->(GLMMorphicTabbedRen...etc...
		format: 	134
		instanceVariables: 	#('tabs')
		organization: 	('rendering' actOnPresentationUpdated: render:)

		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTabbedArrangement>>renderGlamorouslyOn:
	Receiver: a GLMTabbedArrangement
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		composite: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(637...etc...


GLMCompositePresentation>>renderGlamorouslyOn:
	Receiver: a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane(637009920 code))
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	nil
		titleIcon: 	nil
		transformation: 	nil
		actions: 	nil
		condition: 	nil
		implicitNotNil: 	nil
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	nil
		acceptsSelection: 	nil
		parentPrototype: 	a GLMCompositePresentation(id=865075200 title=nil pane=a GLMPa...etc...
		registeredAnnouncers: 	nil
		updateActions: 	an OrderedCollection()
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	nil
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		arrangement: 	a GLMTabbedArrangement



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:25 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTextPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aTextPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTextPresentation>>renderGlamorouslyOn:
	Receiver: a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSDI-2015-Submission\con...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	[:file | file name]
		titleIcon: 	nil
		transformation: 	[:file | 
| text |
textLintChecker isNil
		ifFalse: [text := te...etc...
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[true]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTextPresentation(id=934281216 title=nil pane=a GLMPane(10...etc...
		registeredAnnouncers: 	an OrderedCollection(an Announcer an Announcer)
		updateActions: 	an OrderedCollection(a GLMSingleUpdateAction a GLMSingleUpdateAc...etc...
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		format: 	#glamourString
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	nil
		variableBindingsBlock: 	nil
		textBlock: 	nil
		selectedTextBlock: 	nil
		highlightSmalltalk: 	false
		highlightSmalltalkContext: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSD...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		index: 	#(nil)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicCompositeRenderer
		methodDict: 	a MethodDictionary(#actOnPresentationUpdated:->(GLMMorphicTabbedRen...etc...
		format: 	134
		instanceVariables: 	#('tabs')
		organization: 	('rendering' actOnPresentationUpdated: render:)

		subclasses: 	nil
		name: 	#GLMMorphicTabbedRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTabbedCompositePresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aCompositePresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:26 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTextPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aTextPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTextPresentation>>renderGlamorouslyOn:
	Receiver: a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSDI-2015-Submission\con...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	[:file | file name]
		titleIcon: 	nil
		transformation: 	[:file | 
| text |
textLintChecker isNil
		ifFalse: [text := te...etc...
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[true]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTextPresentation(id=934281216 title=nil pane=a GLMPane(10...etc...
		registeredAnnouncers: 	an OrderedCollection(an Announcer an Announcer)
		updateActions: 	an OrderedCollection(a GLMSingleUpdateAction a GLMSingleUpdateAc...etc...
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		format: 	#glamourString
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	nil
		variableBindingsBlock: 	nil
		textBlock: 	nil
		selectedTextBlock: 	nil
		highlightSmalltalk: 	false
		highlightSmalltalkContext: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSD...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		morph: 	nil
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil


GLMMorphicTabbedRenderer>>render:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMCompositePresentation(id=192937984 title=nil pane=a GLMPane...etc...
		presentations: 	an OrderedCollection(a GLMTextPresentation(id=279183360 title='E...etc...
		index: 	#(nil)
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:26 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTextPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aTextPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTextPresentation>>renderGlamorouslyOn:
	Receiver: a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSDI-2015-Submission\con...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	[:file | file name]
		titleIcon: 	nil
		transformation: 	[:file | 
| text |
textLintChecker isNil
		ifFalse: [text := te...etc...
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[true]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTextPresentation(id=934281216 title=nil pane=a GLMPane(10...etc...
		registeredAnnouncers: 	an OrderedCollection(an Announcer an Announcer)
		updateActions: 	an OrderedCollection(a GLMSingleUpdateAction a GLMSingleUpdateAc...etc...
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		format: 	#glamourString
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	nil
		variableBindingsBlock: 	nil
		textBlock: 	nil
		selectedTextBlock: 	nil
		highlightSmalltalk: 	false
		highlightSmalltalkContext: 	nil


GLMMorphicRenderer(GLMRenderer)>>render:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aRenderable: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
	Receiver: a GLMMorphicTabbedRenderer
	Arguments and temporary variables: 
		anObject: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSD...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		tabs: 	nil



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:27 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicRenderer>>renderTextPresentation:
	Receiver: a GLMMorphicRenderer
	Arguments and temporary variables: 
		aTextPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-...etc...
	Receiver's instance variables: 
		window: 	a GLMSystemWindow(18612224)


GLMTextPresentation>>renderGlamorouslyOn:
	Receiver: a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-paper\NSDI-2015-Submission\con...etc...
	Arguments and temporary variables: 
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	false
		logger: 	a GLMNullLogger
		pane: 	a GLMPane(637009920 code)
		title: 	[:file | file name]
		titleIcon: 	nil
		transformation: 	[:file | 
| text |
textLintChecker isNil
		ifFalse: [text := te...etc...
		actions: 	an OrderedCollection(a GLMGenericAction)
		condition: 	[true]
		implicitNotNil: 	true
		dynamicActionsBlock: 	nil
		color: 	nil
		customValidation: 	nil
		shouldValidate: 	false
		acceptsSelection: 	nil
		parentPrototype: 	a GLMTextPresentation(id=934281216 title=nil pane=a GLMPane(10...etc...
		registeredAnnouncers: 	an OrderedCollection(an Announcer an Announcer)
		updateActions: 	an OrderedCollection(a GLMSingleUpdateAction a GLMSingleUpdateAc...etc...
		selectionActions: 	nil
		selectionDynamicActionsBlock: 	nil
		implicitAllNil: 	false
		rawSelectionTransmissions: 	a Set(GLMTransmission (origins=an OrderedCollection(...etc...
		format: 	#glamourString
		icon: 	nil
		selectedText: 	nil
		cursorPosition: 	nil
		text: 	nil
		doItReceiver: 	nil
		variableBindingsBlock: 	nil
		textBlock: 	nil
		selectedTextBlock: 	nil
		highlightSmalltalk: 	false
		highlightSmalltalkContext: 	nil



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
SubscriptOutOfBounds: 810
7 October 2015 9:31:27 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>errorSubscriptBounds:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString(Object)>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

ByteString>>at:
	Receiver: '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...
	Arguments and temporary variables: 
		index: 	810
	Receiver's instance variables: 
'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a system that offers multi...etc...

CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		ascii: 	nil
		nextDestX: 	nil
		char: 	nil
		floatDestX: 	84
		widthAndKernedWidth: 	#(nil nil)
		nextChar: 	nil
		atEndOfRun: 	false
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	810
		stopIndex: 	906
		sourceString: 	'\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		rightX: 	142
		stops: 	a TextStopConditions
		kernDelta: 	0
		startEncoding: 	nil
		selector: 	nil
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
	Receiver: a CompositionScanner
	Arguments and temporary variables: 
		startIndex: 	796
		lineRectangle: 	0@672 corner: 142@684
		firstLine: 	false
		leftSide: 	true
		rightSide: 	true
		runLength: 	111
		stopCondition: 	#space
	Receiver's instance variables: 
		destX: 	84
		lastIndex: 	810
		xTable: 	#(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 7...etc...
		destY: 	672
		stopConditions: 	a TextStopConditions
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		alignment: 	0
		leftMargin: 	0
		rightMargin: 	142
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		line: 	a TextLine 796 to: 0
		runStopIndex: 	906
		spaceCount: 	2
		spaceWidth: 	4
		emphasisCode: 	0
		kern: 	0
		indentationLevel: 	0
		wantsColumnBreaks: 	false
		pendingKernX: 	0
		spaceX: 	80
		spaceIndex: 	809
		lineHeight: 	14
		baseline: 	11
		lineHeightAtSpace: 	14
		baselineAtSpace: 	11


TextComposer>>composeEachRectangleIn:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		myLine: 	nil
		lastChar: 	nil
		i: 	1
		iLimiT: 	1
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllRectangles:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
		charIndexBeforeLine: 	796
		numberOfLinesBefore: 	42
		reasonForStopping: 	nil
		i: 	nil
		iLimiT: 	nil
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeOneLine
	Receiver: a TextComposer
	Arguments and temporary variables: 
		rectangles: 	{(0@672 corner: 142@684)}
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeAllLines
	Receiver: a TextComposer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
	Receiver: a TextComposer
	Arguments and temporary variables: 
		argStart: 	1
		argStop: 	809
		argDelta: 	0
		argLinesCollection: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: ...etc...
		argPriorLines: 	#()
		argStartY: 	0
		argTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		argText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		argContainer: 	0@0 corner: 142@9999999
		argWantsColumnBreaks: 	false
	Receiver's instance variables: 
		lines: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextLine...etc...
		maxRightX: 	142
		currentY: 	672
		scanner: 	a CompositionScanner
		possibleSlide: 	false
		nowSliding: 	false
		prevIndex: 	1
		prevLines: 	#()
		currCharIndex: 	796
		startCharIndex: 	1
		stopCharIndex: 	809
		deltaCharIndex: 	0
		theText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		theContainer: 	0@0 corner: 142@9999999
		isFirstLine: 	false
		theTextStyle: 	a TextStyle Bitmap DejaVu Sans 9
		defaultLineHeight: 	12
		actualHeight: 	12
		wantsColumnBreaks: 	false


MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		start: 	1
		stop: 	809
		delta: 	0
		lineColl: 	an OrderedCollection(a TextLine 1 to: 21 a TextLine 22 to: 44 a TextL...etc...
		priorLines: 	#()
		startingY: 	0
		newResult: 	nil
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>composeAll
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


MultiNewParagraph(NewParagraph)>>compose:style:from:in:
	Receiver: a MultiNewParagraph
	Arguments and temporary variables: 
		t: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys, a...etc...
		ts: 	a TextStyle Bitmap DejaVu Sans 9
		startingIndex: 	1
		textContainer: 	0@0 corner: 142@9999999
	Receiver's instance variables: 
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		firstCharacterIndex: 	1
		container: 	0@0 corner: 142@9999999
		lines: 	nil
		positionWhenComposed: 	0@0
		offsetToEnd: 	808
		maxRightX: 	nil
		selectionStart: 	nil
		selectionStop: 	nil
		wantsColumnBreaks: 	false
		focused: 	nil
		caretRect: 	nil
		showCaret: 	nil
		presentationText: 	nil
		presentationLines: 	nil
		findReplaceSelectionRegex: 	nil
		secondarySelection: 	nil
		extraSelectionBlocks: 	nil
		refreshExtraSelection: 	nil


GLMTextMorphForEditView(TextMorph)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		newParagraph: 	a MultiNewParagraph
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>newContents:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		newText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \...etc...
		embeddedMorphs: 	an IdentitySet()
		attribs: 	nil
		textSize: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
	Receiver: a GLMTextMorphForEditView(649854976)
	Arguments and temporary variables: 
		stringOrText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presen...etc...
		width: 	142
	Receiver's instance variables: 
		bounds: 	0@0 corner: 142@14
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color black
		extension: 	a MorphExtension (730071040) [other:  (CreatingParagraph -> true)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sys...etc...
		wrapFlag: 	true
		paragraph: 	nil
		editor: 	nil
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editView: 	nil
		acceptOnCR: 	false
		autoAccept: 	false
		acceptOnFocusChange: 	false
		selectionColor: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>setText:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		aText: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \sy...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
	Receiver: a GLMPluggableTextMorph(700186624)
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		bounds: 	0@0 corner: 150@120
		owner: 	nil
		submorphs: 	an Array(a TransformMorph(908591104))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (628621312)
		borderWidth: 	1
		borderColor: 	Color black
		model: 	a GLMTextModel
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(728760320)
		scroller: 	a TransformMorph(908591104)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:shifted:
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(666370048)
		textMorph: 	nil
		getTextSelector: 	#text
		setTextSelector: 	#accept:notifying:
		getSelectionSelector: 	#selection
		hasUnacceptedEdits: 	false
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	nil
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		styled: 	false
		autoAccept: 	nil
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	nil
		alwaysAccept: 	nil
		nullStyler: 	a NullTextStyler
		shoutedStyler: 	nil
		announcer: 	nil


GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
	Receiver: GLMPluggableTextMorph
	Arguments and temporary variables: 
		anObject: 	a GLMTextModel
		getTextSel: 	#text
		setTextSel: 	#accept:notifying:
		getSelectionSel: 	#selection
		getMenuSel: 	#menu:shifted:
	Receiver's instance variables: 
		superclass: 	PluggableTextMorph
		methodDict: 	a MethodDictionary(#announceSelection:from:to:->(GLMPluggableTextMo...etc...
		format: 	214
		instanceVariables: 	#('announcer')
		organization: 	('accessing' announcer)
('interactive error protocol' announceSel...etc...
		subclasses: 	nil
		name: 	#GLMPluggableTextMorph
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Widgets'
		traitComposition: 	{}
		localSelectors: 	nil


GLMMorphicTextRenderer>>textMorphForModel:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aTextModel: 	a GLMTextModel
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer>>render:
	Receiver: a GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		toShow: 	a Text for '\section{Conclusion}
\label{sec:conclusion}
We presented \s...etc...
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textModel: 	a GLMTextModel
		textMorph: 	nil


GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
	Receiver: GLMMorphicTextRenderer
	Arguments and temporary variables: 
		aPresentation: 	a GLMTextPresentation(id=279183360 title='E:\Repos\MSR\filo-pape...etc...
		aRenderer: 	a GLMMorphicRenderer
	Receiver's instance variables: 
		superclass: 	GLMMorphicWidgetRenderer
		methodDict: 	a MethodDictionary(#actOnContextChanged:->(GLMMorphicTextRenderer>>...etc...
		format: 	136
		instanceVariables: 	#('textModel' 'textMorph')
		organization: 	('rendering' actOnContextChanged: actOnPresentationUpdated: rende...etc...
		subclasses: 	nil
		name: 	#GLMMorphicTextRenderer
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Glamour-Morphic-Renderer'
		traitComposition: 	{}
		localSelectors: 	nil



--- The full stack ---
ByteString(Object)>>errorSubscriptBounds:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
ByteString(Object)>>at:
ByteString>>at:
CompositionScanner(CharacterScanner)>>basicScanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner(CharacterScanner)>>scanCharactersFrom:to:in:rightX:stopConditions:kern:
CompositionScanner>>composeFrom:inRectangle:firstLine:leftSide:rightSide:
TextComposer>>composeEachRectangleIn:
TextComposer>>composeAllRectangles:
TextComposer>>composeOneLine
TextComposer>>composeAllLines
TextComposer>>composeLinesFrom:to:delta:into:priorLines:atY:textStyle:text:container:wantsColumnBreaks:
MultiNewParagraph(NewParagraph)>>composeLinesFrom:to:delta:into:priorLines:atY:
MultiNewParagraph(NewParagraph)>>composeAll
MultiNewParagraph(NewParagraph)>>compose:style:from:in:
GLMTextMorphForEditView(TextMorph)>>paragraph
GLMTextMorphForEditView(TextMorphForEditView)>>paragraph
GLMTextMorphForEditView(TextMorph)>>newContents:
GLMTextMorphForEditView(TextMorph)>>contents:wrappedTo:
GLMPluggableTextMorph(PluggableTextMorph)>>setTextBasic:
GLMPluggableTextMorph(PluggableTextMorph)>>setText:
GLMPluggableTextMorph(PluggableTextMorph)>>on:text:accept:readSelection:menu:
GLMPluggableTextMorph class(PluggableTextMorph class)>>on:text:accept:readSelection:menu:
GLMMorphicTextRenderer>>textMorphForModel:
GLMMorphicTextRenderer>>render:
GLMMorphicTextRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
GLMMorphicRenderer>>renderTextPresentation:
GLMTextPresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicTabbedRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicTabbedRenderer>>render:
GLMMorphicTabbedRenderer class(GLMMorphicWidgetRenderer class)>>render:from:
GLMMorphicRenderer>>renderTabbedCompositePresentation:
GLMTabbedArrangement>>renderGlamorouslyOn:
GLMCompositePresentation>>renderGlamorouslyOn:
GLMMorphicRenderer(GLMRenderer)>>render:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderObject:
GLMMorphicPaneRenderer(GLMMorphicWidgetRenderer)>>renderWithTitleOrNil:
GLMMorphicPaneRenderer>>renderContainerFor:
GLMMorphicPaneRenderer>>actOnMatchingPresentationChanged:
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[action cull: anAnnouncement cull: announcer] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[Processor terminateActive] in [:ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
	thisCtx := onDoCtx home.
	[onDoCtx sender == thisCtx]
		whileFalse: [onDoCtx := onDoCtx sender.
			onDoCtx
				ifNil: [^ handlerAction cull: ex]].
	bottom := [Processor terminateActive] asContext.
	onDoCtx privSender: bottom.
	handler := [handlerAction cull: ex] asContext.
	handler privSender: thisContext sender.
	(Process forContext: handler priority: Processor activePriority) resume.
	thisContext privSender: thisCtx.
	nil] in BlockClosure>>on:fork:
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: No content to install
7 October 2015 9:47:10 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

CodeLoader(Object)>>error:
	Receiver: a CodeLoader
	Arguments and temporary variables: 
		aString: 	'No content to install'
	Receiver's instance variables: 
		sourceFiles: 	an Array(an UrlDownloadRequest)


CodeLoader>>installSourceFile:
	Receiver: a CodeLoader
	Arguments and temporary variables: 
		aStream: 	nil
		contents: 	nil
	Receiver's instance variables: 
		sourceFiles: 	an Array(an UrlDownloadRequest)


[:req | 
req startRetrieval.
	self installSourceFile: req contentStream] in CodeLoader>>installSourceFiles
	Receiver: a CodeLoader
	Arguments and temporary variables: 
		req: 	an UrlDownloadRequest
	Receiver's instance variables: 
		sourceFiles: 	an Array(an UrlDownloadRequest)


Array(SequenceableCollection)>>do:
	Receiver: an Array(an UrlDownloadRequest)
	Arguments and temporary variables: 
		aBlock: 	[:req | 
req startRetrieval.
	self installSourceFile: req contentStream...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(an UrlDownloadRequest)

CodeLoader>>installSourceFiles
	Receiver: a CodeLoader
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceFiles: 	an Array(an UrlDownloadRequest)


CodeLoader class>>commandLineHandlerAction:
	Receiver: CodeLoader
	Arguments and temporary variables: 
		aCommandLine: 	a CommandLine
		url: 	http://--help/
		param: 	'file:d:\Users\chrisgk\.emacs.d\extra\textlint\TextLint-OneClick.app\Con...etc...
		loader: 	a CodeLoader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#createRequestFor:in:->(CodeLoader>>#createReque...etc...
		format: 	132
		instanceVariables: 	#('sourceFiles')
		organization: 	('installing' installSourceFile: installSourceFiles)
('loading' l...etc...
		subclasses: 	nil
		name: 	#CodeLoader
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Download'
		traitComposition: 	{}
		localSelectors: 	nil


[:t1 | CodeLoader commandLineHandlerAction: t1] in CodeLoader class>>initialize
	Receiver: CodeLoader
	Arguments and temporary variables: 
		t1: 	a CommandLine
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#createRequestFor:in:->(CodeLoader>>#createReque...etc...
		format: 	132
		instanceVariables: 	#('sourceFiles')
		organization: 	('installing' installSourceFile: installSourceFiles)
('loading' l...etc...
		subclasses: 	nil
		name: 	#CodeLoader
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Download'
		traitComposition: 	{}
		localSelectors: 	nil


[:each | 
| actionBlock conditionBlock |
conditionBlock := each key.
	actionBlock := each value.
	(conditionBlock value: anUserInput)
		ifTrue: [actionBlock value: anUserInput]] in CommandLine class(AbstractUserInput class)>>dispatch:
	Receiver: CommandLine
	Arguments and temporary variables: 
		anUserInput: 	[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 | CodeLoa...etc...
		each: 	a CommandLine
		actionBlock: 	[:t1 | CodeLoader commandLineHandlerAction: t1]
		conditionBlock: 	[:t1 | CodeLoader commandLineHandlerCondition: t1]
	Receiver's instance variables: 
		superclass: 	AbstractUserInput
		methodDict: 	a MethodDictionary()
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#CommandLine
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil
		registrations: 	a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...
		singleton: 	a CommandLine


[:association | aBlock value: association value] in Dictionary>>valuesDo:
	Receiver: a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 | CodeL...etc...
	Arguments and temporary variables: 
		aBlock: 	#CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 |...etc...
		association: 	[:each | 
| actionBlock conditionBlock |
conditionBlock := each ke...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...


[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
	Receiver: a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 | CodeL...etc...
	Arguments and temporary variables: 
		aBlock: 	#CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 |...etc...
		each: 	[:association | aBlock value: association value]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil nil nil #CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | each
		ifNotNil: [aBlock value: each]]
		index: 	4
		indexLimiT: 	5
	Receiver's instance variables: 
an Array(nil nil nil #CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 | CodeL...etc...
	Arguments and temporary variables: 
		aBlock: 	[:association | aBlock value: association value]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...


Dictionary>>valuesDo:
	Receiver: a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 | CodeL...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| actionBlock conditionBlock |
conditionBlock := each key.
	a...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...


Dictionary>>do:
	Receiver: a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCondition: t1]->[:t1 | CodeL...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
| actionBlock conditionBlock |
conditionBlock := each key.
	a...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil nil #CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...


CommandLine class(AbstractUserInput class)>>dispatch:
	Receiver: CommandLine
	Arguments and temporary variables: 
		anUserInput: 	a CommandLine
	Receiver's instance variables: 
		superclass: 	AbstractUserInput
		methodDict: 	a MethodDictionary()
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#CommandLine
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil
		registrations: 	a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...
		singleton: 	a CommandLine


[self dispatch: singleton] in CommandLine class>>dispatch
	Receiver: CommandLine
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	AbstractUserInput
		methodDict: 	a MethodDictionary()
		format: 	136
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#CommandLine
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil
		registrations: 	a Dictionary(#CodeLoader->[:t1 | CodeLoader commandLineHandlerCo...etc...
		singleton: 	a CommandLine


BlockClosure>>cull:
	Receiver: [self dispatch: singleton]
	Arguments and temporary variables: 
		anArg: 	true
	Receiver's instance variables: 
		outerContext: 	CommandLine class>>dispatch
		startpc: 	30
		numArgs: 	0


[:each | each cull: resuming] in SmalltalkImage>>executeDeferredStartupActions:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		resuming: 	[self dispatch: singleton]
		each: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection([self dispatch: singleton])


OrderedCollection>>do:
	Receiver: an OrderedCollection([self dispatch: singleton])
	Arguments and temporary variables: 
		aBlock: 	[:each | each cull: resuming]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil [self dispatch: singleton] nil nil nil nil nil nil nil)...etc...
		firstIndex: 	3
		lastIndex: 	3


SmalltalkImage>>executeDeferredStartupActions:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection([self dispatch: singleton])


SmalltalkImage>>snapshot:andQuit:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		snapshotResult: 	true
		resuming: 	true
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	an OrderedCollection([self dispatch: singleton])


WorldState class>>saveAndQuit
	Receiver: WorldState
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#activeHand->(WorldState>>#activeHand "a Compile...etc...
		format: 	152
		instanceVariables: 	#('hands' 'viewBox' 'canvas' 'damageRecorder' 'stepList' 'la...etc...
		organization: 	('alarms' addAlarm:withArguments:for:at: adjustAlarmTimes: alarmS...etc...
		subclasses: 	nil
		name: 	#WorldState
		classPool: 	a Dictionary(#CanSurrenderToOS->true #DebugShowDamage->false #Deferr...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Worlds'
		traitComposition: 	{}
		localSelectors: 	nil


[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(268173312)'Save and quit'
	Arguments and temporary variables: 
		evt: 	[473@407 mouseUp 1945210 nil]
		selArgCount: 	0
	Receiver's instance variables: 
		bounds: 	430@397 corner: 575@415
		owner: 	a MenuMorph(202637312)
		submorphs: 	#()
		fullBounds: 	430@397 corner: 575@415
		color: 	Color black
		extension: 	a MorphExtension (278396928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Save and quit'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	WorldState
		selector: 	#saveAndQuit
		arguments: 	#()
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	156
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(268173312)'Save and quit'
	Arguments and temporary variables: 
		evt: 	[473@407 mouseUp 1945210 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	430@397 corner: 575@415
		owner: 	a MenuMorph(202637312)
		submorphs: 	#()
		fullBounds: 	430@397 corner: 575@415
		color: 	Color black
		extension: 	a MorphExtension (278396928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Save and quit'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	WorldState
		selector: 	#saveAndQuit
		arguments: 	#()
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(268173312)'Save and quit'
	Arguments and temporary variables: 
		evt: 	[473@407 mouseUp 1945210 nil]
	Receiver's instance variables: 
		bounds: 	430@397 corner: 575@415
		owner: 	a MenuMorph(202637312)
		submorphs: 	#()
		fullBounds: 	430@397 corner: 575@415
		color: 	Color black
		extension: 	a MorphExtension (278396928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Save and quit'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	WorldState
		selector: 	#saveAndQuit
		arguments: 	#()
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(268173312)'Save and quit'
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
	Receiver's instance variables: 
		bounds: 	430@397 corner: 575@415
		owner: 	a MenuMorph(202637312)
		submorphs: 	#()
		fullBounds: 	430@397 corner: 575@415
		color: 	Color black
		extension: 	a MorphExtension (278396928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Save and quit'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	WorldState
		selector: 	#saveAndQuit
		arguments: 	#()
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [473@407 mouseUp 1945210 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(268173312)'Save and quit'
	Receiver's instance variables: 
		timeStamp: 	1945210
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	473@407
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(268173312)'Save and quit'
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
	Receiver's instance variables: 
		bounds: 	430@397 corner: 575@415
		owner: 	a MenuMorph(202637312)
		submorphs: 	#()
		fullBounds: 	430@397 corner: 575@415
		color: 	Color black
		extension: 	a MorphExtension (278396928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Save and quit'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	WorldState
		selector: 	#saveAndQuit
		arguments: 	#()
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
		aMorph: 	a ToggleMenuItemMorph(268173312)'Save and quit'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
		aMorph: 	a ToggleMenuItemMorph(268173312)'Save and quit'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(268173312)'Save and quit'
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	430@397 corner: 575@415
		owner: 	a MenuMorph(202637312)
		submorphs: 	#()
		fullBounds: 	430@397 corner: 575@415
		color: 	Color black
		extension: 	a MorphExtension (278396928)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'Save and quit'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	WorldState
		selector: 	#saveAndQuit
		arguments: 	#()
		icon: 	Form(16x16x32)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
		aMorph: 	a MenuMorph(202637312)
		localEvt: 	[473@407 mouseUp 1945210 nil]
		index: 	15
		child: 	a ToggleMenuItemMorph(268173312)'Save and quit'
		morphs: 	an Array(an AlignmentMorph(354156544) a ToggleMenuItemMorph(317194240)'...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
		aMorph: 	a MenuMorph(202637312)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(202637312)
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	426@174 corner: 579@438
		owner: 	nil
		submorphs: 	an Array(an AlignmentMorph(354156544) a ToggleMenuItemMorph(31719424...etc...
		fullBounds: 	426@174 corner: 580@439
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (217579520) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(268173312)'Save and quit'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(202637312)
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
	Receiver's instance variables: 
		bounds: 	426@174 corner: 579@438
		owner: 	nil
		submorphs: 	an Array(an AlignmentMorph(354156544) a ToggleMenuItemMorph(31719424...etc...
		fullBounds: 	426@174 corner: 580@439
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (217579520) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(268173312)'Save and quit'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(202637312)
	Arguments and temporary variables: 
		evt: 	[473@407 mouseUp 1945210 nil]
	Receiver's instance variables: 
		bounds: 	426@174 corner: 579@438
		owner: 	nil
		submorphs: 	an Array(an AlignmentMorph(354156544) a ToggleMenuItemMorph(31719424...etc...
		fullBounds: 	426@174 corner: 580@439
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (217579520) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	nil
		selectedItem: 	a ToggleMenuItemMorph(268173312)'Save and quit'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil
		menuItems: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[473@407 mouseUp 1945210 nil]
		focusHolder: 	a MenuMorph(202637312)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	100@100 corner: 116@116
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	100@100 corner: 116@116
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(727973888)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[0@0 mouseMove nil nil]
		targetOffset: 	43@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 0 0 0 0 0 nil nil)
		lastKeyScanCode: 	2
		combinedChar: 	nil



--- The full stack ---
CodeLoader(Object)>>error:
CodeLoader>>installSourceFile:
[:req | 
req startRetrieval.
	self installSourceFile: req contentStream] in CodeLoader>>installSourceFiles
Array(SequenceableCollection)>>do:
CodeLoader>>installSourceFiles
CodeLoader class>>commandLineHandlerAction:
[:t1 | CodeLoader commandLineHandlerAction: t1] in CodeLoader class>>initialize
[:each | 
| actionBlock conditionBlock |
conditionBlock := each key.
	actionBlock := each value.
	(conditionBlock value: anUserInput)
		ifTrue: [actionBlock value: anUserInput]] in CommandLine class(AbstractUserInput class)>>dispatch:
[:association | aBlock value: association value] in Dictionary>>valuesDo:
[:each | each
		ifNotNil: [aBlock value: each]] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>valuesDo:
Dictionary>>do:
CommandLine class(AbstractUserInput class)>>dispatch:
[self dispatch: singleton] in CommandLine class>>dispatch
BlockClosure>>cull:
[:each | each cull: resuming] in SmalltalkImage>>executeDeferredStartupActions:
OrderedCollection>>do:
SmalltalkImage>>executeDeferredStartupActions:
SmalltalkImage>>snapshot:andQuit:
WorldState class>>saveAndQuit
[| selArgCount |
(selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector]
		ifFalse: [selArgCount = arguments size
				ifTrue: [target perform: selector withArguments: arguments]
				ifFalse: [target
						perform: selector
						withArguments: (arguments copyWith: evt)]].
	self changed] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>sliceFrom:to:
7 October 2015 9:48:59 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	nil
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
		fileStream: 	nil
		cursor: 	1
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (file...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStrea...etc...
		startpc: 	172
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream force...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		presentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPane...etc...
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>glamourValueWithArgs:
	Receiver: [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMActionListPresentation(id=353894400 title=nil pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	[:a | a actionList
		act: [:presentation :filePath | 
			Cursor w...etc...
		startpc: 	165
		numArgs: 	2


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPan...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		logger: 	a GLMNullLogger
		action: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream curs...etc...
		title: 	'Export'
		shortcut: 	nil
		position: 	nil
		category: 	nil
		icon: 	nil


GLMButtonModel>>execute
	Receiver: a GLMButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		glamourPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a ...etc...
		glamourAction: 	a GLMGenericAction


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(203161600)
		m: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(203161600))
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(203161600))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		all: 	an Array(a PluggableButtonMorph(203161600))
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [513@271 mouseUp 118642078 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(203161600)
	Receiver's instance variables: 
		timeStamp: 	118642078
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	513@271
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	513@271 corner: 529@287
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	513@271 corner: 529@287
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271056896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[513@271 mouseUp 118642078 nil]
		targetOffset: 	200@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118642078 513 271 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(208928768) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[513@271 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(208928768) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	513@271 corner: 529@287
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	513@271 corner: 529@287
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271056896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[513@271 mouseUp 118642078 nil]
		targetOffset: 	200@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118642078 513 271 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	513@271 corner: 529@287
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	513@271 corner: 529@287
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271056896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[513@271 mouseUp 118642078 nil]
		targetOffset: 	200@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118642078 513 271 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	513@271 corner: 529@287
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	513@271 corner: 529@287
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271056896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[513@271 mouseUp 118642078 nil]
		targetOffset: 	200@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118642078 513 271 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		evt: 	[513@271 mouseUp 118642078 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	513@271 corner: 529@287
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	513@271 corner: 529@287
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271056896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[513@271 mouseUp 118642078 nil]
		targetOffset: 	200@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118642078 513 271 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		evtBuf: 	#(1 118642078 513 271 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	513@271 corner: 529@287
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	513@271 corner: 529@287
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(271056896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[513@271 mouseUp 118642078 nil]
		targetOffset: 	200@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118642078 513 271 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	94944
		lastStepMessage: 	nil
		lastCycleTime: 	94987
		alarms: 	a Heap()
		lastAlarmTime: 	94944
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	94944
		lastStepMessage: 	nil
		lastCycleTime: 	94987
		alarms: 	a Heap()
		lastAlarmTime: 	94944
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	94944
		lastStepMessage: 	nil
		lastCycleTime: 	94987
		alarms: 	a Heap()
		lastAlarmTime: 	94944
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	94944
		lastStepMessage: 	nil
		lastCycleTime: 	94987
		alarms: 	a Heap()
		lastAlarmTime: 	94944
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(208928768) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary()
		format: 	132
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
GLMButtonModel>>execute
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>sliceFrom:to:
7 October 2015 9:49:07 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	nil
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
		fileStream: 	nil
		cursor: 	1
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (file...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStrea...etc...
		startpc: 	172
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream force...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		presentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPane...etc...
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>glamourValueWithArgs:
	Receiver: [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMActionListPresentation(id=353894400 title=nil pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	[:a | a actionList
		act: [:presentation :filePath | 
			Cursor w...etc...
		startpc: 	165
		numArgs: 	2


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPan...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		logger: 	a GLMNullLogger
		action: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream curs...etc...
		title: 	'Export'
		shortcut: 	nil
		position: 	nil
		category: 	nil
		icon: 	nil


GLMButtonModel>>execute
	Receiver: a GLMButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		glamourPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a ...etc...
		glamourAction: 	a GLMGenericAction


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(203161600)
		m: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(203161600))
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(203161600))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		all: 	an Array(a PluggableButtonMorph(203161600))
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [513@271 mouseUp 118642078 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(203161600)
	Receiver's instance variables: 
		timeStamp: 	118642078
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	513@271
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(9437184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118650718 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118650718 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1028390912) a GL...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[513@271 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1028390912) a GL...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(9437184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118650718 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118650718 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(9437184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118650718 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118650718 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(9437184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118650718 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118650718 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		evt: 	[513@271 mouseUp 118642078 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(9437184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118650718 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118650718 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		evtBuf: 	#(1 118642078 513 271 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(9437184)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118650718 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118650718 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	103587
		lastStepMessage: 	nil
		lastCycleTime: 	103633
		alarms: 	a Heap()
		lastAlarmTime: 	103587
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	103587
		lastStepMessage: 	nil
		lastCycleTime: 	103633
		alarms: 	a Heap()
		lastAlarmTime: 	103587
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	103587
		lastStepMessage: 	nil
		lastCycleTime: 	103633
		alarms: 	a Heap()
		lastAlarmTime: 	103587
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	103587
		lastStepMessage: 	nil
		lastCycleTime: 	103633
		alarms: 	a Heap()
		lastAlarmTime: 	103587
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(1028390912) a GL...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary()
		format: 	132
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
GLMButtonModel>>execute
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>sliceFrom:to:
7 October 2015 9:49:08 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	nil
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
		fileStream: 	nil
		cursor: 	1
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (file...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStrea...etc...
		startpc: 	172
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream force...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		presentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPane...etc...
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>glamourValueWithArgs:
	Receiver: [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMActionListPresentation(id=353894400 title=nil pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	[:a | a actionList
		act: [:presentation :filePath | 
			Cursor w...etc...
		startpc: 	165
		numArgs: 	2


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPan...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		logger: 	a GLMNullLogger
		action: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream curs...etc...
		title: 	'Export'
		shortcut: 	nil
		position: 	nil
		category: 	nil
		icon: 	nil


GLMButtonModel>>execute
	Receiver: a GLMButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		glamourPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a ...etc...
		glamourAction: 	a GLMGenericAction


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(203161600)
		m: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(203161600))
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(203161600))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		all: 	an Array(a PluggableButtonMorph(203161600))
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [513@271 mouseUp 118642078 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(203161600)
	Receiver's instance variables: 
		timeStamp: 	118642078
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	513@271
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651343 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651343 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(411303936) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[513@271 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(411303936) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651343 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651343 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651343 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651343 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651343 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651343 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		evt: 	[513@271 mouseUp 118642078 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651343 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651343 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		evtBuf: 	#(1 118642078 513 271 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(946077696)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651343 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651343 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104233
		lastStepMessage: 	nil
		lastCycleTime: 	104276
		alarms: 	a Heap()
		lastAlarmTime: 	104233
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104233
		lastStepMessage: 	nil
		lastCycleTime: 	104276
		alarms: 	a Heap()
		lastAlarmTime: 	104233
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104233
		lastStepMessage: 	nil
		lastCycleTime: 	104276
		alarms: 	a Heap()
		lastAlarmTime: 	104233
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104233
		lastStepMessage: 	nil
		lastCycleTime: 	104276
		alarms: 	a Heap()
		lastAlarmTime: 	104233
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(411303936) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary()
		format: 	132
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
GLMButtonModel>>execute
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>sliceFrom:to:
7 October 2015 9:49:08 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	nil
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
		fileStream: 	nil
		cursor: 	1
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (file...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStrea...etc...
		startpc: 	172
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream force...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		presentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPane...etc...
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>glamourValueWithArgs:
	Receiver: [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMActionListPresentation(id=353894400 title=nil pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	[:a | a actionList
		act: [:presentation :filePath | 
			Cursor w...etc...
		startpc: 	165
		numArgs: 	2


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPan...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		logger: 	a GLMNullLogger
		action: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream curs...etc...
		title: 	'Export'
		shortcut: 	nil
		position: 	nil
		category: 	nil
		icon: 	nil


GLMButtonModel>>execute
	Receiver: a GLMButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		glamourPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a ...etc...
		glamourAction: 	a GLMGenericAction


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(203161600)
		m: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(203161600))
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(203161600))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		all: 	an Array(a PluggableButtonMorph(203161600))
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [513@271 mouseUp 118642078 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(203161600)
	Receiver's instance variables: 
		timeStamp: 	118642078
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	513@271
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422313984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651843 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651843 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(343408640) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[513@271 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(343408640) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422313984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651843 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651843 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422313984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651843 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651843 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422313984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651843 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651843 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		evt: 	[513@271 mouseUp 118642078 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422313984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651843 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651843 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		evtBuf: 	#(1 118642078 513 271 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(422313984)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118651843 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118651843 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104730
		lastStepMessage: 	nil
		lastCycleTime: 	104771
		alarms: 	a Heap()
		lastAlarmTime: 	104730
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104730
		lastStepMessage: 	nil
		lastCycleTime: 	104771
		alarms: 	a Heap()
		lastAlarmTime: 	104730
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104730
		lastStepMessage: 	nil
		lastCycleTime: 	104771
		alarms: 	a Heap()
		lastAlarmTime: 	104730
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	104730
		lastStepMessage: 	nil
		lastCycleTime: 	104771
		alarms: 	a Heap()
		lastAlarmTime: 	104730
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(343408640) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
	Receiver: Project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Model
		methodDict: 	a MethodDictionary()
		format: 	132
		instanceVariables: 	nil
		organization: 	('as yet unclassified')

		subclasses: 	nil
		name: 	#Project
		classPool: 	a Dictionary(#UIProcess->a Process in nil )
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Support'
		traitComposition: 	{}
		localSelectors: 	nil


[self value.
	Processor terminateActive] in BlockClosure>>newProcess
	Receiver: [[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	Project class>>spawnNewProcess
		startpc: 	57
		numArgs: 	0



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
GLMButtonModel>>execute
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>sliceFrom:to:
7 October 2015 9:49:09 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	nil
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
		fileStream: 	nil
		cursor: 	1
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (file...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStrea...etc...
		startpc: 	172
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream force...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		presentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPane...etc...
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>glamourValueWithArgs:
	Receiver: [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMActionListPresentation(id=353894400 title=nil pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	[:a | a actionList
		act: [:presentation :filePath | 
			Cursor w...etc...
		startpc: 	165
		numArgs: 	2


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPan...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		logger: 	a GLMNullLogger
		action: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream curs...etc...
		title: 	'Export'
		shortcut: 	nil
		position: 	nil
		category: 	nil
		icon: 	nil


GLMButtonModel>>execute
	Receiver: a GLMButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		glamourPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a ...etc...
		glamourAction: 	a GLMGenericAction


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(203161600)
		m: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(203161600))
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(203161600))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		all: 	an Array(a PluggableButtonMorph(203161600))
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [513@271 mouseUp 118642078 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(203161600)
	Receiver's instance variables: 
		timeStamp: 	118642078
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	513@271
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(460587008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652390 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652390 244 48 0 0 2 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(381681664) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[513@271 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(381681664) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(460587008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652390 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652390 244 48 0 0 2 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(460587008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652390 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652390 244 48 0 0 2 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(460587008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652390 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652390 244 48 0 0 2 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		evt: 	[513@271 mouseUp 118642078 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(460587008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652390 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652390 244 48 0 0 2 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		evtBuf: 	#(1 118642078 513 271 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(460587008)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652390 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652390 244 48 0 0 2 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	105260
		lastStepMessage: 	nil
		lastCycleTime: 	105301
		alarms: 	a Heap()
		lastAlarmTime: 	105260
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	105260
		lastStepMessage: 	nil
		lastCycleTime: 	105301
		alarms: 	a Heap()
		lastAlarmTime: 	105260
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	105260
		lastStepMessage: 	nil
		lastCycleTime: 	105301
		alarms: 	a Heap()
		lastAlarmTime: 	105260
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	105260
		lastStepMessage: 	nil
		lastCycleTime: 	105301
		alarms: 	a Heap()
		lastAlarmTime: 	105260
		menuBuilder: 	a PragmaMenuBuilder


PasteUpMorph>>doOneCycle
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(381681664) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
GLMButtonModel>>execute
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>sliceFrom:to:
7 October 2015 9:49:09 pm

VM: Win32 - IX86 - 6.2 - Croquet Closure Cog VM [CoInterpreter VMMaker.oscog-eem.252]
Image: Pharo1.3 [Latest update: #13298]

ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	nil
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

Message>>sentTo:
	Receiver: sliceFrom: 46 to: 59
	Arguments and temporary variables: 
		receiver: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		selector: 	#sliceFrom:to:
		args: 	#(46 59)
		lookupClass: 	ByteString


ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
	Receiver: 'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Arguments and temporary variables: 
		aMessage: 	sliceFrom: 46 to: 59
		exception: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
		resumeValue: 	MessageNotUnderstood: ByteString>>sliceFrom:to:
	Receiver's instance variables: 
'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'

[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
		fileStream: 	nil
		cursor: 	1
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>ensure:
	Receiver: [| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (file...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStrea...etc...
		startpc: 	172
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r11111111111111000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream force...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
	Receiver: a TLCodeBrowser
	Arguments and temporary variables: 
		presentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPane...etc...
		filePath: 	'E:\Repos\MSR\filo-paper\NSDI-2015-Submission\implementation.tex'
	Receiver's instance variables: 
		textLintChecker: 	a TLTextLintChecker
		results: 	an Array(a TLRuleFailure
	a TLPassiveVoiceRule
	a TLPhrase (is left) a...etc...
		saveAnnouncer: 	an Announcer
		lastRuleSelectionInterval: 	(666 to: 672)
		styleAnnouncer: 	an Announcer


BlockClosure>>glamourValueWithArgs:
	Receiver: [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(a GLMActionListPresentation(id=353894400 title=nil pane=a GLM...etc...
	Receiver's instance variables: 
		outerContext: 	[:a | a actionList
		act: [:presentation :filePath | 
			Cursor w...etc...
		startpc: 	165
		numArgs: 	2


GLMGenericAction(GLMAction)>>actOn:
	Receiver: a GLMGenericAction
	Arguments and temporary variables: 
		aPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a GLMPan...etc...
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspendAll: 	nil
		logger: 	a GLMNullLogger
		action: 	[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream curs...etc...
		title: 	'Export'
		shortcut: 	nil
		position: 	nil
		category: 	nil
		icon: 	nil


GLMButtonModel>>execute
	Receiver: a GLMButtonModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		glamourPresentation: 	a GLMActionListPresentation(id=353894400 title=nil pane=a ...etc...
		glamourAction: 	a GLMGenericAction


PluggableButtonMorph>>performAction
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	a PluggableButtonMorph(203161600)
		m: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(203161600))
	Arguments and temporary variables: 
		aBlock: 	[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTru...etc...
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(203161600))

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		all: 	an Array(a PluggableButtonMorph(203161600))
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [513@271 mouseUp 118642078 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(203161600)
	Receiver's instance variables: 
		timeStamp: 	118642078
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	513@271
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(203161600)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	311@263 corner: 824@287
		owner: 	a PanelMorph(127926272)
		submorphs: 	an Array(an AlignmentMorph(945553408))
		fullBounds: 	311@263 corner: 824@287
		color: 	Color transparent
		extension: 	a MorphExtension (229638144) [other:  (lastState -> false)]
		borderWidth: 	0
		borderColor: 	#simple
		model: 	a GLMButtonModel
		label: 	'Export'
		getStateSelector: 	nil
		actionSelector: 	#execute
		getLabelSelector: 	#buttonLabel
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	#()
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		gradientLook: 	true
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil


[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(852230144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652937 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652937 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[aBlock value] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(806092800) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[513@271 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 943@715
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(984088576) a PreDebugWindow(806092800) a GLM...etc...
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(852230144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652937 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652937 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		focusHolder: 	a PluggableButtonMorph(203161600)
		aBlock: 	[self mouseFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(852230144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652937 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652937 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(852230144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652937 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652937 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[513@271 mouseUp 118642078 nil]
		evt: 	[513@271 mouseUp 118642078 nil]
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(852230144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652937 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652937 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[513@271 mouseUp 118642078 nil]
		evtBuf: 	#(1 118642078 513 271 0 0 1 1)
		type: 	1
		hadAny: 	false
	Receiver's instance variables: 
		bounds: 	244@48 corner: 260@64
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	244@48 corner: 260@64
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(852230144)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[244@48 mouseUp 118652937 nil]
		targetOffset: 	45@17
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 118652937 244 48 0 0 1 1)
		lastKeyScanCode: 	2
		combinedChar: 	nil


[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	105818
		lastStepMessage: 	nil
		lastCycleTime: 	105859
		alarms: 	a Heap()
		lastAlarmTime: 	105818
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	105818
		lastStepMessage: 	nil
		lastCycleTime: 	105859
		alarms: 	a Heap()
		lastAlarmTime: 	105818
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 943@715
		canvas: 	a FormCanvas on: DisplayScreen(943x715x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a MorphDropListMorph(405798912))(a Mor...etc...
		lastStepTime: 	105818
		lastStepMessage: 	nil
		lastCycleTime: 	105859
		alarms: 	a Heap()
		lastAlarmTime: 	105818
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
Message>>sentTo:
ByteString(Object)>>doesNotUnderstand: #sliceFrom:to:
[| fileStream cursor |
cursor := 1.
	fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
						+ 1 to: filePath size - 4)
					, '.out'.
	results
		do: [:failure | 
			fileStream nextPutAll: failure rule name.
			fileStream nextPutAll: ' - '.
			fileStream nextPutAll: failure rule rationale.
			fileStream nextPutAll: String cr].
	fileStream flush.
	fileStream close] in [:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
[:presentation :filePath | 
Cursor wait
		showWhile: [| fileStream cursor |
			cursor := 1.
			fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
								+ 1 to: filePath size - 4)
							, '.out'.
			results
				do: [:failure | 
					fileStream nextPutAll: failure rule name.
					fileStream nextPutAll: ' - '.
					fileStream nextPutAll: failure rule rationale.
					fileStream nextPutAll: String cr].
			fileStream flush.
			fileStream close].
	StandardWindow new message: 'Export completed'] in [:a | a actionList
		act: [:presentation :filePath | 
			Cursor wait
				showWhile: [| fileStream cursor |
					cursor := 1.
					fileStream := CrLfFileStream forceNewFileNamed: (filePath sliceFrom: (filePath findLastOccurrenceOfString: FileDirectory slash startingAt: 1)
										+ 1 to: filePath size - 4)
									, '.out'.
					results
						do: [:failure | 
							fileStream nextPutAll: failure rule name.
							fileStream nextPutAll: ' - '.
							fileStream nextPutAll: failure rule rationale.
							fileStream nextPutAll: String cr].
					fileStream flush.
					fileStream close].
			StandardWindow new message: 'Export completed']
		entitled: 'Export'] in TLCodeBrowser>>exportButtonOn:
BlockClosure>>glamourValueWithArgs:
GLMGenericAction(GLMAction)>>actOn:
GLMButtonModel>>execute
PluggableButtonMorph>>performAction
[:m | (m containsPoint: evt cursorPoint)
		ifTrue: [m enabled
				ifTrue: [m performAction]]] in PluggableButtonMorph>>mouseUp:
Array(SequenceableCollection)>>do:
PluggableButtonMorph>>mouseUp:
PluggableButtonMorph(Morph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
PluggableButtonMorph(Morph)>>handleEvent:
PluggableButtonMorph(Morph)>>handleFocusEvent:
[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
				handleFocusEvent: (anEvent
						transformedBy: (focusHolder transformedFrom: self))] in HandMorph>>sendFocusEvent:to:clear:
[aBlock value] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[[World doOneCycle.
	Processor yield.
	false] whileFalse.
	nil] in Project class>>spawnNewProcess
[self value.
	Processor terminateActive] in BlockClosure>>newProcess
------------------------------------------------------------

